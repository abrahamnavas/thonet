'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
const { basename, dirname, extname, join, relative, sep } = require('path');
const StringUtil = require('./string');

const VARIANTS_DIRNAME = exports.VARIANTS_DIRNAME = 'variants';

const componentIdToVariantsPath = exports.componentIdToVariantsPath = (componentsPath, componentId) => join(componentsPath, componentId, VARIANTS_DIRNAME);

const variantIdToComponentId = exports.variantIdToComponentId = id => dirname(id).split(sep)[0];

const variantIdToTitle = exports.variantIdToTitle = id => {
  const base = basename(id, extname(id));
  return StringUtil.titleize(base);
};

const variantFilePathToComponentId = exports.variantFilePathToComponentId = (componentsPath, variantFilePath) => {
  const relativePath = relative(componentsPath, variantFilePath);

  return relativePath.match(`/${VARIANTS_DIRNAME}/`) ? dirname(relativePath).split(sep)[0] : null;
};

const variantIdToVariantFilePath = exports.variantIdToVariantFilePath = (componentsPath, id) => {
  const componentId = variantIdToComponentId(id);
  const variantsPath = componentIdToVariantsPath(componentsPath, componentId);
  const variantFileName = basename(id);
  const variantFile = join(variantsPath, variantFileName);

  return variantFile;
};

const variantFilePathToVariantId = exports.variantFilePathToVariantId = (componentsPath, variantFilePath) => {
  const componentId = variantFilePathToComponentId(componentsPath, variantFilePath);

  if (componentId) {
    const variantsPath = componentIdToVariantsPath(componentsPath, componentId);
    const relativePath = relative(variantsPath, variantFilePath);
    const base = basename(relativePath);
    const variantId = `${componentId}/${base}`;

    return variantId;
  } else {
    return null;
  }
};