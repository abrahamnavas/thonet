'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decorateContext = exports.decorateCode = exports.decorateContent = exports.localize = exports.titleize = exports.dasherize = exports.upcaseFirstChar = exports.highlight = undefined;

var _highlight = require('highlight.js');

var _highlight2 = _interopRequireDefault(_highlight);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const highlight = exports.highlight = (code, lang) => {
  const languages = lang != null ? [lang] : undefined;
  const { value, language } = _highlight2.default.highlightAuto(code, languages);
  const highlighted = `<pre class="hljs" lang="${lang || language}"><code>${value}</code></pre>`;

  return highlighted;
};

const upcaseFirstChar = exports.upcaseFirstChar = string => {
  return string.charAt(0).toUpperCase() + string.slice(1);
};

const dasherize = exports.dasherize = string => {
  return String(string).replace(/\W+/gi, '-');
};

const titleize = exports.titleize = string => {
  return string.split(/\W+/gi).map(w => w.charAt(0).toUpperCase() + w.slice(1)).join(' ');
};

const localize = exports.localize = (dict, key, interpolations) => {
  const localized = key.split('.').reduce((a, b) => a && a[b], dict);

  if (localized && interpolations) {
    return localized.replace(/%\{(.+?)\}/g, (match, name) => {
      const str = interpolations[name];

      if (str) {
        return str;
      } else {
        console.warn('[UIengine]', `Missing interpolation "${name}" for key "${key}"!`);
        return `[${name}]`;
      }
    });
  } else if (localized) {
    return localized;
  } else {
    console.warn('[UIengine]', `Missing localization for key "${key}"!`);
    return `[${key}]`;
  }
};

// replace headings which resemble the component/page title
const decorateContent = exports.decorateContent = pageOrComponent => {
  const { content, title } = pageOrComponent;
  const regexp = new RegExp(`^<h1.*?>${title}</h1>`);

  return content.replace(regexp, '').trim();
};

const decorateCode = exports.decorateCode = (code, lang) => {
  return highlight(code, lang);
};

const decorateContext = exports.decorateContext = json => {
  return highlight(JSON.stringify(json, null, 2), 'json');
};